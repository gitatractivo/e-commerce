// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// import config from "config";

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(cuid())
  email         String             @unique
  name          String
  password      String
  emailVerified DateTime?
  sessions      Session[]
  token         VerificationToken?
  // Product       Product[]
  role          Role               @default(USER)
}

enum Role {
  USER
  ADMIN
  MERCHANT
}

model Session {
  id        String   @id @default(cuid())
  userAgent String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  valid     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt
}

model VerificationToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  products  Product[] @relation("CategoryToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id         String      @id @default(uuid())
  categoryId String // Foreign Key to Category
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String // Foreign Key to Size
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String // Foreign Key to Color
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[] // Relation to Image model
  orderItems OrderItem[] // Relation to Order model
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  createdById String

  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Order {
  id         String      @id @default(uuid())
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Size {
  id         String    @id @default(uuid())
  name       String
  value      String
  products   Product[] // Relation to Product model
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  categoryId String
}

model Color {
  id        String    @id @default(uuid())
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
